(function($) {
  "use strict"; // Start of use strict

  // Smooth scrolling using jQuery easing
  $('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function() {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      if (target.length) {
        $('html, body').animate({
          scrollTop: (target.offset().top - 48)
        }, 1000, "easeInOutExpo");
        return false;
      }
    }
  });

  // Closes responsive menu when a scroll trigger link is clicked
  $('.js-scroll-trigger').click(function() {
    $('.navbar-collapse').collapse('hide');
  });

  // Activate scrollspy to add active class to navbar items on scroll
  $('body').scrollspy({
    target: '#mainNav',
    offset: 54
  });

  // Collapse Navbar
  var navbarCollapse = function() {
    if ($("#mainNav").offset().top > 100) {
      $("#mainNav").addClass("navbar-shrink");
    } else {
      $("#mainNav").removeClass("navbar-shrink");
    }
  };
  // Collapse now if page is not at top
  navbarCollapse();
  // Collapse the navbar when page is scrolled
  $(window).scroll(navbarCollapse);

})(jQuery); // End of use strict

// validation for contact email
const validate= function(){
  var x = document.forms["emailForm"]["mail"].value;
  const validateEmail=(email)=>{
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
  }
  if (!validateEmail(x)) {
      alert("Please leave a valid email so I can contact you back!");
      return false;
  }else{
    return true
  }
}
//amelies modals
$("#ameliesModalFeat").click(function(){
  $("#modalTitle").text("Amelies 2.0 Features");
  $("#modalBody").html("<p>Single Page Application</p> <p>User Auth session stored with JSON web token </p><p>Menus dynamically created from database </p> <p>Manager can update database</p> <p>Store stylized writing in database </p><p>Seemlessly send emails<p>")
})
$("#ameliesModalTech").click(function(){
  $("#modalTitle").text("Amelies 2.0 Technologies Used");
  $("#modalBody").html("<p>Full-Stack MERN SPA, Follows MVC</p> <p>Quill, a rich text editor, allowed us to store stylized writing in database </p>  <p> Sendgrid mail npm allowed us to send emails generated by user interaction on website</p><p>Reactstrap CSS framework</p><p>JS Technologies - jQuery, session storage, JWT, Axios ajax calls with preset headers</p><p>Github workflow, Heroku deployment with mLab for database</p><p>npms:  axios, bootstrap, react(-dom, -render-html, -router-dom, -scripts, -player), react-quill, reactstrap, @sendgrid/mail, bcrypt,body-parser, cheerio, express, jsonwebtoken, lodash, mongoose, passport, passport-jwt, react-native-cheerio</p>")
})
$("#ameliesModalFut").click(function(){
  $("#modalTitle").text("Amelies 2.0 Future Development");
  $("#modalBody").html("<p> On locations pages, display a google map of the location pinned</p> <p>Using a captcha to validate a human is requesting a cake order, or creating a confirmation link on email</p><p>Blog page on original is imported and images aren't originally loaded so we cant scrape them into the database. It would be nice to have original source or some way to populate our blog page with those images</p><p>Current Amelies website has no team page, in the future it would be nice to have images and a description for relevent team members we could put on the database that could populate this page.</p>")
})
//r2tc modals
$("#r2tcModalFeat").click(function(){
  $("#modalTitle").text("Rise to the Challenge / Duello Features");
  $("#modalBody").html("<p> Full-Stack using Node, express, MySql, and express-handlebars. Follows MVC</p>  <p>Well modeled, connected collections in database.</p><p> User auth and email usage  </p><p>Display follows closely to state changes</p><p>App provides some pregenerated context but is mostly for user generated material (like facebook, twitter, instagram)</p>")
})
$("#r2tcModalTech").click(function(){
  $("#modalTitle").text("Rise to the Challenge / Duello Technologies Used");
  $("#modalBody").html("<p> Full-Stack App: Node, express, MySql, and express-handlebars. Follows MVC</p>  <p>Materialize (CSS Framework)</p><p>JS technologies - jQuery, AJAX, JSON</p><p>Npms - bcrypt, bluebird, body-parser, connect-flash, cookie-parser, dotenv, express, handlebars, session, mysql, passport (custom token), path, sendgrid, sequelize</p> <p>Heroku deploy with JawsDB</p><p>Github workflow management - Pull requests from branches reviewed before merging to master</p>")
})
$("#r2tcModalFut").click(function(){
  $("#modalTitle").text("Rise to the Challenge / Duello Future Development");
  $("#modalBody").html("<p>Create it to be easily modified for specific cause/charity. Make new webpage for each charity </p><p>Link to other social features. Link to facebook and twitter</p><p>Support more file types for proofs. Currently limited to links of videos or gifs. </p><p>redo/retry function. If a proof gets rejected it would allow the challenged another opportunity to provide proof</p><p>Taunt function - Allow one user to taunt another if a challenge hasnâ€™t been responded to yet</p> <p>Star system/ranking system - give credits to users based on challenges completed or highly used challenge templates. Give rewards based on ranking or stars.</p> <p>User profile - pictures, email, ability to change alias.</p><p>Donations, if a challenge is for a cause allow users to donate money to them, or direct them to a link</p><p>In app, challenge instance specific messaging.</p><p>User Association - bring up only connected users and not all strangers (important as user database grows)</p><p>Make the app more mobile friendly.</p>")
})
//f2p modals
$("#f2pModalFeat").click(function(){
  $("#modalTitle").text("Fridge 2 Plate Features");
  $("#modalBody").html("<p>Front-end app</p><p>input validation</p><p>Uses API's to return information</p><p>Everyday utility</p>");
})
$("#f2pModalTech").click(function(){
  $("#modalTitle").text("Fridge 2 Plate Technologies Used");
  $("#modalBody").html("<p>Css framework: Materialize</p><p>APIs: youtube and Spoonacular</p><p>JS technologies used - AJAX, jquery, materialize carousel</p>");
})
$("#f2pModalFut").click(function(){
  $("#modalTitle").text("Fridge 2 Plate Future Development");
  $("#modalBody").html("<p>modify spoonacular api use. Request for more results and then filter them based on title with sanitation. eliminate any titles with non A-Z character</p><p>modify Youtube api use. allow for more general/less specific searches to be handled. Always get 5+ results for carousel</p><p>Data storage - keep track of and display last x number of searches - user login, save favorite recipes or rate recipes</p>");
})

//GoT modals
$("#GoTModalFeat").click(function(){
  $("#modalTitle").text("Game of Thrones Clicky Features");
  $("#modalBody").html("<p>Front-end app</p><p>Click oriented, fast loading/smooth render</p><p>Memory Game</p><p>High Score vs Current Score tracker</p><p>Material-ui tiles to hold character pictures and names</p><p> React state to store what's been clicked and whats not</p>");
})
$("#GoTModalTech").click(function(){
  $("#modalTitle").text("Game of Thrones Clicky  Technologies Used");
  $("#modalBody").html("<p>Css framework: Material-ui. Utilizes React components and materialize library</p><p>React and Create-react-app to set up webpack and babel</p><p>Knuth Yates shuffle implented in ES6</p>");
})
$("#GoTModalFut").click(function(){
  $("#modalTitle").text("Game of Thrones Clicky Future Development");
  $("#modalBody").html("<p>No plans for future devolopment. It does what it was intended to do.</p>");
})
//project background image slideshow -- edit classes, css does does the changes
const classArray=["bg1", "bg2", "bg3", "bg4"];
const slideshow=(classArray)=>{
// every 10 seconds, change class
  let count=0;
  setInterval(function(){
    $(".project-section").removeClass("bg1 bg2 bg3 bg4");
    $(".project-section").addClass(classArray[count]);
    count++;
    if (count===classArray.length){
      count=0;
    }
    //console.log("hit end of interval, count:"+count+" current class:" +$(".project-section").attr("class").split(' '))
  },10000)
}
//wait for page to load before starting slideshow
$( window ).on( "load", function() { 
  slideshow(classArray);
  
})